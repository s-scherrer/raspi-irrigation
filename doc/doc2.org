* Intro

TODO

* Components
** Data logging with Arduino
- description of code and wiring
** Database

*** postgres

The data generated with the Arduino should be stored in a database. I use a
postgresql database for this. To make things easy, I just use the official
docker image.

The docker-compose section then looks like this, following
https://www.docker.com/blog/how-to-use-the-postgres-docker-official-image/

#+begin_src
  db:
    image: postgres
    restart: always
    volumes:
      - ./postgresdata:/var/lib/postgresql/data
    env_file: .env.dev
#+end_src

Contrary to the example shown in the blog post, I use an environment file, so
that the other processes can also access important settings.

*** pgadmin

For having a nice interface to interact with the database, I use pgadmin.
I also use an official docker image for this. The docker-compose section on
this looks like this:

#+begin_src
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 15432:80
    depends_on:
      - db
    env_file: .env.dev
    volumes:
      - ./pgadmin:/var/lib/pgadmin
#+end_src

The web interface can be accessed on port 15432. When adding a server, set the
hostname to "db", and the username and password as in the postgres settings in
the environment file.

The first time the full application runs (via ~sudo docker-compose -f
docker-compose.yml up~), this create the directory ~pgadmin~ in the top level
directory of the repository. You should make sure that this belongs to user and
group ID 5050, e.g. run ~sudo chown -R 5050:5050 pgadmin~, especially if you
see messages like

#+begin_src
ERROR  : Failed to create the directory /var/lib/pgadmin/sessions:
           [Errno 13] Permission denied: '/var/lib/pgadmin/sessions'
HINT   : Create the directory /var/lib/pgadmin/sessions, ensure it is writeable by
         'pgadmin', and try again, or, create a config_local.py file
         and override the SESSION_DB_PATH setting per
         https://www.pgadmin.org/docs/pgadmin4/6.16/config_py.html
#+end_src

*** Troubleshooting

If you delete (for whatever reasons) the database directory, it can happen that
the webapp and the arduino-comm module complain about not being able to access
the database. What worked for me was:
- restart the app (i.e. stop the current run and run docker-compose up again)
- if this doesn't help, you can remove all the images and containers and start
  again from scratch

** Arduino reader
- reads the data from the arduino and stores it in the database

** Web app

*** Overview

The web app should provide a nice view of the data, i.e. it is mainly a
front-end. However, since I also define the database models within django, it
is really /the/ core component of this whole project.

Since the data we have are quite simple (we could actually just written it to a
csv file), there are only 2 very simple models, defined in
~webapp/irrigation_app/models.py~:
- an ~Observable~, i.e a type of measurement, containing some metadata
  (e.g. name and unit), and
- a ~Measurement~, i.e. a single instance of a measurement containing the type,
  time, and value.

The observables are defined in
~webapp/irrigation_app/fixtures/observables.json~, which currently contains
only relative humidity and air temperature.

The database to use is specified in ~webapp/irrigation/settings.py~. Currently,
it reads the settings from environment variables which are set by
docker-compose.


The webpage showing the data is defined via:
- ~webapp/irrigation_app/views.py~: The data view function (which is currently
  the only view) reads all data from the last 24 hours and passes them on to
  plotly.
- The template containing the plotly setup is defined in
  ~webapp/irrigation_app/templates/irrigation_app/data.html~

The application is run using ~gunicorn~ (defined in ~webapp/docker-entrypoint.sh~).

** Docker setup
First steps:
- install docker + docker-compose
- ~sudo systemctl start docker.service~

Resources:
- https://www.digitalocean.com/community/tutorials/how-to-build-a-django-and-gunicorn-application-with-docker

Initially I wanted to use the miniconda3 image as base for both the arduino
communcation module and the web app, to have an easy way to install psycopg2,
but this is only available for arm64 (i.e. on newer RPis, but I have an RPi 2).

Instead, I opted used alpine, following the guide listed above. An important
dependency I had to add was ~musl-dev~, because otherwise the installation of
~psycopg2~ failed due to missing header files.

Since the python environment is very similar between both the webapp and the
arduino communcation module, I chose to create a single Dockerfile for both,
which resides in ~alpine_python_psycopg2~. The two different containers then
both base on this image, but load their own code into the container, and define
separate entrypoints.

** Test modules


* Hosting on RPi
** Get the code and adapt for local settings

To get the code, it is enough to do a simple git clone. However, we still need
to set environment variables (passwords) for the production setting and set the
tty of the serial connection to the Arduino.

For the latter, ~ls -l /dev/serial/by-id~ can be helpful. In my case, this gave
the following output:
#+begin_src 
total 0
lrwxrwxrwx 1 root root 13 Nov 20 21:17 usb-Arduino__www.arduino.cc__0043_9573632373235191D142-if00 -> ../../ttyACM0
#+end_src
i.e, the serial connection is on ~/dev/ttyACM0~.

** Docker setup

On Raspbian, currently it's recommended to use the [[https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script][convenience script]]
to install docker. Instead of the standalone ~docker-compose~, this installs
the compose plugin, which can be run by omitting the dash, i.e. replace
~docker-compose~ by ~docker compose~ (no dash) in all compose commands.

The first run with docker compose failed due to an issue related to [[https://github.com/docker/compose/issues/6023][this]]. The
solution is also detailed in the GH issue:
#+begin_src bash
sudo apt install gnupg2 pass 
gpg2 --full-generate-key
pass init <key-id>
#+end_src

** Firewall

To allow incoming traffic to port 8000 (where the webpage is hosted), the
firewall might have to be adapted via ~sudo ufw allow in 8000~.

TODOs:
- install newer OS on raspi
  - no, this won't work, because the raspi is too old
  -> need to replace the conda image by a custom image that also works with 32-bit arm
  - miniconda does not work at all with arm
  - the only package that is not straightforward to install with pip is psycopg2
- run docker container

